extends layout

block content
  .title
    h1= title

  .blog-content
    include components/panel.pug
      h1 cat gifs
      h3 learning to program by diving into the deep end
    include components/panel.pug
      :markdown-it(linkify langPrefix='highlight-')

        Programming is usually taught by starting with the basics - if conditions and while loops, input/output and data types. The idea is that once you understand the fundamentals, complex programs will make sense. The trouble with learning this way is that you have no idea what is important to understand. And in a field where it's simply impossible to understand everything - there's just too much information - knowing what you need to know is as valuable a skill as any other.

        We'll build an app that gets cat gifs and draws them on the page. If you're new to programming, you will not understand it completely on your first read through. The idea is less about understanding everything and more about getting a feel for what a real program actually looks like, so when we go back to fundamentals you'll know why you need to understand the concepts.

        Open up the Elm language's [online code editor](http://elm-lang.org/try).

        ~~~
        Elm
        ~~~
        *[Test]: This is a test
        *[Elm]: A language

        ```elm
        -- Read more about this program in the official Elm guide:
        -- https://guide.elm-lang.org/architecture/effects/http.html

        import Html exposing (..)
        import Html.Attributes exposing (..)
        import Html.Events exposing (..)
        import Http
        import Json.Decode as Decode



        main =
          Html.program
            { init = init "cats"
            , view = view
            , update = update
            , subscriptions = subscriptions
            }



        -- MODEL


        type alias Model =
          { topic : String
          , gifUrl : String
          }


        init : String -> (Model, Cmd Msg)
        init topic =
          ( Model topic "waiting.gif"
          , getRandomGif topic
          )



        -- UPDATE


        type Msg
          = MorePlease
          | NewGif (Result Http.Error String)


        update : Msg -> Model -> (Model, Cmd Msg)
        update msg model =
          case msg of
            MorePlease ->
              (model, getRandomGif model.topic)

            NewGif (Ok newUrl) ->
              (Model model.topic newUrl, Cmd.none)

            NewGif (Err _) ->
              (model, Cmd.none)



        -- VIEW


        view : Model -> Html Msg
        view model =
          div []
            [ h2 [] [text model.topic]
            , button [ onClick MorePlease ] [ text "More Please!" ]
            , br [] []
            , img [src model.gifUrl] []
            ]



        -- SUBSCRIPTIONS


        subscriptions : Model -> Sub Msg
        subscriptions model =
          Sub.none



        -- HTTP

        getRandomGif : String -> Cmd Msg
        getRandomGif topic =
          let
            url =
              "https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=" ++ topic
          in
            Http.send NewGif (Http.get url decodeGifUrl)


        decodeGifUrl : Decode.Decoder String
        decodeGifUrl =
          Decode.at ["data", "image_url"] Decode.string

        ```

  script(src='/javascripts/jquery.js')
  script(src='/javascripts/typed.js')
  script(src='/javascripts/typing.js')
